# -*- coding: utf-8 -*-
"""app_Smart_Swachh

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11AWCBExq1MfJBiyH3KLhV9nn0c69wqKd
"""

import streamlit as st
import os
import torch
import torchvision.transforms as transforms
from torchvision import models
from PIL import Image
import pandas as pd
import folium
from streamlit_folium import st_folium
from datetime import datetime

# ------------------ CONFIG ------------------
ISSUE_CLASSES = ['waste_issue', 'infra_issue', 'safety_issue', 'no_issue']
MODEL_PATH = 'model.pth'
UPLOAD_FOLDER = 'uploads/'
REPORTS_FILE = 'issue_reports.csv'

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

if not os.path.exists(REPORTS_FILE):
    pd.DataFrame(columns=['filename', 'issue_type', 'lat', 'lon', 'timestamp', 'status', 'rating']).to_csv(REPORTS_FILE, index=False)

# ------------------ MODEL ------------------
model = models.resnet18(pretrained=False)
model.fc = torch.nn.Linear(model.fc.in_features, len(ISSUE_CLASSES))
model.load_state_dict(torch.load(MODEL_PATH, map_location=torch.device('cpu')))
model.eval()

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

# ------------------ FUNCTIONS ------------------
def predict_image(img_path):
    img = Image.open(img_path).convert('RGB')
    img_t = transform(img).unsqueeze(0)
    with torch.no_grad():
        outputs = model(img_t)
        _, pred = torch.max(outputs, 1)
    return ISSUE_CLASSES[pred.item()]

def log_issue(filename, issue_type, lat, lon):
    df = pd.read_csv(REPORTS_FILE)
    new_entry = {
        'filename': filename,
        'issue_type': issue_type,
        'lat': lat,
        'lon': lon,
        'timestamp': datetime.now().isoformat(),
        'status': 'Pending',
        'rating': ''
    }
    df = df.append(new_entry, ignore_index=True)
    df.to_csv(REPORTS_FILE, index=False)

def calculate_ghg_impact(issue_type):
    if issue_type == 'waste_issue':
        return 2.1  # kg CH4 avoided
    return 0.0

# ------------------ PAGES ------------------
menu = st.sidebar.selectbox("Choose Login", ["Citizen", "Municipal Officer"])

# ---------- CITIZEN PANEL ----------
if menu == "Citizen":
    st.title("Smart Swachh - Citizen Portal")
    st.write("Submit an issue you observe in your locality.")

    uploaded_file = st.file_uploader("Upload Image", type=["jpg", "png", "jpeg"])
    lat = st.number_input("Latitude", format="%.6f")
    lon = st.number_input("Longitude", format="%.6f")

    if uploaded_file and st.button("Submit Issue"):
        file_path = os.path.join(UPLOAD_FOLDER, uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        issue_type = predict_image(file_path)
        log_issue(uploaded_file.name, issue_type, lat, lon)
        st.success(f"Issue detected as **{issue_type}** and reported to municipal officer.")

# ---------- MUNICIPAL PANEL ----------
elif menu == "Municipal Officer":
    st.title("Smart Swachh - Municipal Dashboard")

    df = pd.read_csv(REPORTS_FILE)

    m = folium.Map(location=[22.3, 70.8], zoom_start=5)
    for _, row in df.iterrows():
        folium.Marker(
            location=[row['lat'], row['lon']],
            popup=f"Issue: {row['issue_type']}\nStatus: {row['status']}",
            tooltip=row['issue_type'],
            icon=folium.Icon(color="red" if row['status'] == 'Pending' else 'green')
        ).add_to(m)
    st_folium(m, width=700)

    st.write("### Pending Issues")
    pending_df = df[df['status'] == 'Pending']
    selected = st.selectbox("Select Issue to Resolve", pending_df['filename'].tolist())

    if selected:
        if st.button("Mark as Resolved"):
            df.loc[df['filename'] == selected, 'status'] = 'Resolved'
            df.to_csv(REPORTS_FILE, index=False)
            st.success("Issue marked as resolved.")

        st.write("### Citizen Feedback")
        rating = st.slider("Rate the resolution (out of 5)", 1, 5, 3)
        if st.button("Submit Rating"):
            df.loc[df['filename'] == selected, 'rating'] = rating
            df.to_csv(REPORTS_FILE, index=False)
            st.success("Thank you for your feedback.")

    st.write("### Climate Impact Summary")
    resolved_issues = df[df['status'] == 'Resolved']
    total_ghg = sum([calculate_ghg_impact(row['issue_type']) for _, row in resolved_issues.iterrows()])
    st.metric("GHG Mitigation (kg CHâ‚„ avoided)", round(total_ghg, 2))