# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11AWCBExq1MfJBiyH3KLhV9nn0c69wqKd
"""

!pip install streamlit

import streamlit as st
import pandas as pd
from datetime import datetime
import random
import base64
from io import BytesIO
from PIL import Image

st.set_page_config(page_title="Smart Swachh", layout="wide")

st.title("üöÆ Smart Swachh: AI-Powered Municipal Management")
st.caption("Empowering Citizens ‚Ä¢ Enhancing Accountability ‚Ä¢ Transforming Municipal Services")

# Simulated AI models
def mock_ai_image_analysis(image_bytes):
    """Fake image classifier for demo."""
    categories = [
        "Overflowing Public Bin", "Damaged Road", "Open Manhole", "Illegal Dumping",
        "Broken Drain", "Plastic Waste", "Hazardous Waste", "Broken Streetlight"
    ]
    return random.choice(categories)

def mock_ai_text_summary(text):
    return f"Summarized Issue: {text.strip()[:80]}..." if text else "No description provided."

# Upload Section
st.header("üì∏ Report a Civic Issue")
with st.form("report_form"):
    name = st.text_input("Your Name")
    location = st.text_input("Location / Landmark")
    uploaded_image = st.file_uploader("Upload an Image of the Issue", type=["jpg", "jpeg", "png"])
    description = st.text_area("Describe the Issue (Optional)", height=100)
    submit = st.form_submit_button("Submit Report")

if submit:
    if not uploaded_image or not location:
        st.error("Please upload an image and provide a location.")
    else:
        image = Image.open(uploaded_image)
        img_bytes = uploaded_image.read()
        prediction = mock_ai_image_analysis(img_bytes)
        summary = mock_ai_text_summary(description)

        # Save record (in-memory)
        if "reports" not in st.session_state:
            st.session_state.reports = []

        st.session_state.reports.append({
            "id": len(st.session_state.reports) + 1,
            "user": name or "Anonymous",
            "location": location,
            "issue_type": prediction,
            "description": description,
            "summary": summary,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "status": "Pending",
            "rating": None
        })

        st.success(f"‚úÖ Issue submitted and categorized as: **{prediction}**")
        st.image(image, caption="Uploaded Image", use_column_width=True)

# Track Reports
st.header("üìã My Reported Issues")
if "reports" in st.session_state and st.session_state.reports:
    df = pd.DataFrame(st.session_state.reports)
    for i, row in df.iterrows():
        with st.expander(f"üìù Report #{row['id']} - {row['issue_type']}"):
            st.write(f"**Location:** {row['location']}")
            st.write(f"**Reported by:** {row['user']}")
            st.write(f"**Date:** {row['date']}")
            st.write(f"**Status:** üö¶ {row['status']}")
            st.write(f"**AI Summary:** {row['summary']}")

            if row['status'] == "Resolved" and not row['rating']:
                rating = st.slider(f"Rate resolution for report #{row['id']}", 1, 5, 3, key=f"rating_{row['id']}")
                feedback = st.selectbox(
                    "What was the issue with the resolution?",
                    ["", "Delayed", "Not cleaned properly", "Incomplete", "Unsatisfactory"],
                    key=f"fb_{row['id']}"
                )
                comment = st.text_area("Additional Feedback (Optional)", key=f"comment_{row['id']}")
                if st.button(f"Submit Feedback for #{row['id']}", key=f"submit_{row['id']}"):
                    st.session_state.reports[i]["rating"] = rating
                    st.session_state.reports[i]["feedback"] = feedback
                    st.session_state.reports[i]["comment"] = comment
                    st.success("‚úÖ Thank you for your feedback!")
else:
    st.info("You have not submitted any reports yet.")

# Admin Section (for demo)
with st.sidebar:
    st.markdown("### üõ†Ô∏è Admin Tools (Simulated)")
    if st.button("üßπ Resolve a Random Report"):
        if "reports" in st.session_state:
            unresolved = [r for r in st.session_state.reports if r["status"] == "Pending"]
            if unresolved:
                chosen = random.choice(unresolved)
                chosen["status"] = "Resolved"
                st.success(f"Report #{chosen['id']} marked as Resolved.")
            else:
                st.warning("No pending reports to resolve.")
    if st.button("üìä Show All Reports (CSV)"):
        if "reports" in st.session_state:
            st.dataframe(pd.DataFrame(st.session_state.reports))
        else:
            st.info("No reports available.")

st.markdown("---")
st.caption("Built with ‚ù§Ô∏è using Streamlit ¬∑ Prototype demo of Smart Swachh ¬∑ [GitHub](https://github.com/aakankshatiwari)")