# -*- coding: utf-8 -*-
"""app_Smart_Swachh

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11AWCBExq1MfJBiyH3KLhV9nn0c69wqKd
"""

# -------------- CONFIG ----------------
UPLOAD_FOLDER = "uploads"
MODEL_PATH = "models/smart_swachh_model.pt"
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# -------------- CLASSES ----------------
issue_categories = ['waste_issue', 'infra_issue', 'safety_issue', 'no_issue']
category_to_ghg = {'waste_issue': 2.1, 'infra_issue': 0.5, 'safety_issue': 0.2, 'no_issue': 0.0}

# -------------- LOAD MODEL ----------------
model = models.resnet18(pretrained=False)
model.fc = torch.nn.Linear(model.fc.in_features, len(issue_categories))

try:
    model.load_state_dict(torch.load(MODEL_PATH, map_location=DEVICE))
    model.to(DEVICE)
    model.eval()
except (FileNotFoundError, EOFError):
    st.warning("‚ö†Ô∏è Model file not found or corrupted. Upload `smart_swachh_model.pt` to 'models/' folder.")
    model = None

# -------------- UI ----------------
st.set_page_config(page_title="Smart Swachh", layout="wide")
st.title("üßπ Smart Swachh ‚Äì AI-powered Municipal Issue Tracker")

# User type selection
user_type = st.sidebar.selectbox("Login as", ["Citizen", "Municipal Officer"])

# -------------- Common Dashboard ----------------
st.subheader("üìç Issue Map")
if "map_data" not in st.session_state:
    st.session_state.map_data = pd.DataFrame(columns=["lat", "lon", "issue", "ghg", "resolved", "rating"])

# Folium heatmap
m = folium.Map(location=[27.55, 76.63], zoom_start=10)
for _, row in st.session_state.map_data.iterrows():
    icon_color = "green" if row["resolved"] else "red"
    folium.Marker(
        [row["lat"], row["lon"]],
        popup=f"Issue: {row['issue']} | Resolved: {row['resolved']}",
        icon=folium.Icon(color=icon_color)
    ).add_to(m)
st_folium(m, width=700, height=450)

# -------------- Citizen View ----------------
if user_type == "Citizen":
    st.subheader("üì§ Report an Issue")
    uploaded_file = st.file_uploader("Upload an image of the issue", type=["jpg", "jpeg", "png"])
    lat = st.number_input("Latitude", format="%.6f")
    lon = st.number_input("Longitude", format="%.6f")

    if uploaded_file and lat and lon and model:
        image_path = os.path.join(UPLOAD_FOLDER, uploaded_file.name)
        with open(image_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        image = Image.open(image_path).convert("RGB")

        # Transform and predict
        transform = transforms.Compose([
            transforms.Resize((128, 128)),
            transforms.ToTensor()
        ])
        input_tensor = transform(image).unsqueeze(0).to(DEVICE)
        pred = model(input_tensor).argmax(dim=1).item()
        predicted_class = issue_categories[pred]

        # GHG Mitigation
        ghg_saved = category_to_ghg[predicted_class]

        # Store to map data
        new_entry = {
            "lat": lat,
            "lon": lon,
            "issue": predicted_class,
            "ghg": ghg_saved,
            "resolved": False,
            "rating": None
        }
        st.session_state.map_data.loc[len(st.session_state.map_data)] = new_entry

        st.success(f"üßæ Issue classified as: `{predicted_class}`")
        st.info(f"üå± Estimated GHG Emissions Prevented: `{ghg_saved} kg CH‚ÇÑ`")

# -------------- Municipal Officer View ----------------
elif user_type == "Municipal Officer":
    st.subheader("üìã Issues To Resolve")
    unresolved = st.session_state.map_data[~st.session_state.map_data["resolved"]]

    if unresolved.empty:
        st.info("üéâ No pending issues!")
    else:
        for idx, row in unresolved.iterrows():
            st.write(f"üìç Location: ({row['lat']}, {row['lon']}) | Type: {row['issue']}")
            if st.button(f"‚úÖ Mark as Resolved - ID {idx}"):
                st.session_state.map_data.at[idx, "resolved"] = True
                st.success("Marked as resolved.")

# -------------- Feedback ----------------
st.subheader("‚≠ê Provide Feedback")
resolved = st.session_state.map_data[st.session_state.map_data["resolved"] & st.session_state.map_data["rating"].isnull()]

for idx, row in resolved.iterrows():
    st.write(f"Issue at ({row['lat']}, {row['lon']}) classified as `{row['issue']}`")
    rating = st.slider(f"Rate the resolution (ID {idx})", 1, 5, key=f"rating_{idx}")
    feedback = st.text_input("Any comments?", key=f"comment_{idx}")
    if st.button(f"Submit Feedback - ID {idx}"):
        st.session_state.map_data.at[idx, "rating"] = rating
        st.success("‚úÖ Feedback submitted!")

# -------------- GHG Summary ----------------
st.sidebar.subheader("üåç Sustainability Impact")
total_ghg = st.session_state.map_data["ghg"].sum()
st.sidebar.metric("Total GHG Saved", f"{total_ghg:.2f} kg CH‚ÇÑ")
resolved_count = st.session_state.map_data["resolved"].sum()
st.sidebar.metric("Resolved Issues", resolved_count)