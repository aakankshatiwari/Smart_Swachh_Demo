# -*- coding: utf-8 -*-
"""app_Smart_Swachh

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11AWCBExq1MfJBiyH3KLhV9nn0c69wqKd
"""

import streamlit as st
import os
from PIL import Image
import numpy as np
import pandas as pd
import pydeck as pdk

# ----------------------------
# CONFIGURATION
# ----------------------------
UPLOAD_FOLDER = "uploaded_images"
ISSUE_CATEGORIES = ["No Issue", "Waste Issue", "Infrastructure Issue", "Safety Issue"]
CATEGORY_TO_COLOR = {
    "No Issue": [0, 255, 0],        # Green
    "Waste Issue": [255, 165, 0],   # Orange
    "Infrastructure Issue": [255, 0, 0],   # Red
    "Safety Issue": [0, 0, 255],    # Blue
}

# Create folder if not exists
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# In-memory database simulation
if "reports" not in st.session_state:
    st.session_state.reports = []

# ----------------------------
# PAGE SETUP
# ----------------------------
st.set_page_config(page_title="Smart Swachh", layout="wide")
st.title("üßπ Smart Swachh : App for Bharat")

# ----------------------------
# TABS: Citizen & Officer Login
# ----------------------------
tab = st.sidebar.radio("Login As", ["Citizen", "Municipal Officer"])

# ----------------------------
# CITIZEN WORKFLOW
# ----------------------------
if tab == "Citizen":
    st.header("üë• Citizen Portal")
    with st.form("issue_form"):
        name = st.text_input("Your Name")
        location = st.text_input("Your Location (Address or Landmark)")
        image = st.file_uploader("Upload an image of the issue", type=["png", "jpg", "jpeg"])
        description = st.text_area("Describe the issue")
        lat = st.number_input("Latitude", format="%0.6f")
        lon = st.number_input("Longitude", format="%0.6f")
        submit = st.form_submit_button("Submit Report")

    if submit and image is not None:
        # Save image
        img_path = os.path.join(UPLOAD_FOLDER, image.name)
        with open(img_path, "wb") as f:
            f.write(image.getbuffer())

        # Mock Classification: Based on filename keyword
        issue_type = "No Issue"
        fname_lower = image.name.lower()
        if "waste" in fname_lower:
            issue_type = "Waste Issue"
        elif "infra" in fname_lower or "road" in fname_lower:
            issue_type = "Infrastructure Issue"
        elif "safety" in fname_lower:
            issue_type = "Safety Issue"

        report = {
            "name": name,
            "location": location,
            "image": img_path,
            "description": description,
            "lat": lat,
            "lon": lon,
            "category": issue_type,
            "status": "Pending",
            "rating": None,
            "ghg_saved": 2.1 if issue_type == "Waste Issue" else 0
        }

        st.session_state.reports.append(report)
        st.success(f"Report submitted successfully as '{issue_type}'.")

# ----------------------------
# MUNICIPAL OFFICER WORKFLOW
# ----------------------------
else:
    st.header("üèõÔ∏è Municipal Officer Dashboard")
    if not st.session_state.reports:
        st.info("No issues reported yet.")
    else:
        df = pd.DataFrame(st.session_state.reports)
        st.dataframe(df[["name", "location", "category", "status", "ghg_saved"]])

        selected_idx = st.selectbox("Select a Report to Act On", range(len(st.session_state.reports)))
        selected = st.session_state.reports[selected_idx]

        st.image(selected["image"], width=300)
        st.markdown(f"**Issue**: {selected['category']}")
        st.markdown(f"**Description**: {selected['description']}")
        st.markdown(f"**GHG Mitigation**: {selected['ghg_saved']} kg CH‚ÇÑ avoided")

        if selected["status"] != "Resolved":
            if st.button("Mark as Resolved"):
                selected["status"] = "Resolved"
                st.success("Issue marked as resolved.")

        if selected["status"] == "Resolved" and selected["rating"] is None:
            rating = st.slider("Citizen Rating (1 = Poor, 5 = Excellent)", 1, 5, 3)
            if st.button("Submit Feedback"):
                selected["rating"] = rating
                st.success("Feedback recorded. Thank you!")

        # ----------------------------
        # üìç Visual Heatmap using PyDeck
        # ----------------------------
        st.subheader("üó∫Ô∏è Issue Heatmap (Interactive)")

        heat_df = pd.DataFrame(st.session_state.reports)
        if not heat_df.empty:
            heat_df["color"] = heat_df["category"].map(lambda cat: CATEGORY_TO_COLOR[cat])
            layer = pdk.Layer(
                "ScatterplotLayer",
                data=heat_df,
                get_position='[lon, lat]',
                get_radius=400,
                get_fill_color="color",
                pickable=True,
                auto_highlight=True,
            )

            view_state = pdk.ViewState(
                latitude=heat_df["lat"].mean() if not heat_df["lat"].isnull().all() else 28.6,
                longitude=heat_df["lon"].mean() if not heat_df["lon"].isnull().all() else 77.2,
                zoom=11,
                pitch=0
            )

            st.pydeck_chart(pdk.Deck(
                map_style="mapbox://styles/mapbox/light-v9",
                initial_view_state=view_state,
                layers=[layer],
                tooltip={"text": "{category} - {status}"}
            ))

# ----------------------------
# END
# ----------------------------
